name: microsoft/azuredevops
resources:
    azuredevops_agent_pool:
        subCategory: ""
        description: Manages an agent pool within Azure DevOps organization.
        name: azuredevops_agent_pool
        title: azuredevops_agent_pool
        examples:
            - name: example
              manifest: |-
                {
                  "auto_provision": false,
                  "auto_update": false,
                  "name": "Example-pool"
                }
        argumentDocs:
            auto_provision: '- (Optional) Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.'
            auto_update: '- (Optional) Specifies whether or not agents within the pool should be automatically updated. Defaults to true.'
            id: '- The ID of the agent pool.'
            name: '- (Required) The name of the agent pool.'
            pool_type: '- (Optional) Specifies whether the agent pool type is Automation or Deployment. Defaults to automation.'
        importStatements: []
    azuredevops_agent_queue:
        subCategory: ""
        description: Manages an agent queue within Azure DevOps project.
        name: azuredevops_agent_queue
        title: azuredevops_agent_queue
        examples:
            - name: example
              manifest: |-
                {
                  "agent_pool_id": "${data.azuredevops_agent_pool.example.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                agent_pool_id: data.azuredevops_agent_pool.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_resource_authorization.example: |-
                    {
                      "authorized": true,
                      "project_id": "${azuredevops_project.example.id}",
                      "resource_id": "${azuredevops_agent_queue.example.id}",
                      "type": "queue"
                    }
        argumentDocs:
            agent_pool_id: '- (Required) The ID of the organization agent pool.'
            id: '- The ID of the agent queue reference.'
            project_id: '- (Required) The ID of the project in which to create the resource.'
        importStatements: []
    azuredevops_area_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Area (Component)
        name: azuredevops_area_permissions
        title: azuredevops_area_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "path": "/",
                  "permissions": {
                    "CREATE_CHILDREN": "Deny",
                    "DELETE": "Deny",
                    "GENERIC_READ": "Allow",
                    "WORK_ITEM_READ": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) The name of the branch to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
        importStatements: []
    azuredevops_branch_policy_auto_reviewers:
        subCategory: ""
        description: Manages required reviewer policy branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_auto_reviewers
        title: azuredevops_branch_policy_auto_reviewers
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "auto_reviewer_ids": [
                        "${azuredevops_user_entitlement.example.id}"
                      ],
                      "message": "Auto reviewer",
                      "path_filters": [
                        "*/src/*.ts"
                      ],
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        }
                      ],
                      "submitter_can_vote": false
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "account_license_type": "basic",
                      "principal_name": "mail@email.com"
                    }
        argumentDocs:
            0.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            blocking: '- (Optional) A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms "optional" and "required" reviewers. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.auto_reviewer_ids: '- (Required) Required reviewers ids. Supports multiples user Ids.'
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.message: '- (Optional) Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.'
            settings.minimum_number_of_reviewers: '- (Optional) Minimum number of required reviewers. Defaults to 1.'
            settings.path_filters: '- (Optional) Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.'
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.submitter_can_vote: '- (Optional) Controls whether or not the submitter''s vote counts. Defaults to false.'
        importStatements: []
    azuredevops_branch_policy_build_validation:
        subCategory: ""
        description: Manages a build validation branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_build_validation
        title: azuredevops_branch_policy_build_validation
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "build_definition_id": "${azuredevops_build_definition.example.id}",
                      "display_name": "Example build validation policy",
                      "filename_patterns": [
                        "/WebApp/*",
                        "!/WebApp/Tests/*",
                        "*.cs"
                      ],
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ],
                      "valid_duration": 720
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.build_definition_id: azuredevops_build_definition.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_build_definition.example: |-
                    {
                      "name": "Example Build Definition",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository": [
                        {
                          "repo_id": "${azuredevops_git_repository.example.id}",
                          "repo_type": "TfsGit",
                          "yml_path": "azure-pipelines.yml"
                        }
                      ]
                    }
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.build_definition_id: '- (Required) The ID of the build to monitor for the policy.'
            settings.display_name: '- (Required) The display name for the policy.'
            settings.filename_patterns: '- (Optional) If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.'
            settings.manual_queue_only: '- (Optional) If set to true, the build will need to be manually queued. Defaults to false'
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.queue_on_source_update_only: '- (Optional) True if the build should queue on source updates only. Defaults to true.'
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.valid_duration: '- (Optional) The number of minutes for which the build is valid. If 0, the build will not expire. Defaults to 720 (12 hours).'
        importStatements: []
    azuredevops_branch_policy_comment_resolution:
        subCategory: ""
        description: Configure a comment resolution policy for your branch within Azure DevOps project.
        name: azuredevops_branch_policy_comment_resolution
        title: azuredevops_branch_policy_comment_resolution
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
        importStatements: []
    azuredevops_branch_policy_merge_types:
        subCategory: ""
        description: Enforces the merge types allowed on a branch.
        name: azuredevops_branch_policy_merge_types
        title: azuredevops_branch_policy_merge_types
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "allow_basic_no_fast_forward": true,
                      "allow_rebase_and_fast_forward": true,
                      "allow_rebase_with_merge": true,
                      "allow_squash": true,
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": null,
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.allow_basic_no_fast_forward: '- (Optional) Allow basic merge with no fast forward. Defaults to false.'
            settings.allow_rebase_and_fast_forward: '- (Optional) Allow rebase with fast forward. Defaults to false.'
            settings.allow_rebase_with_merge: '- (Optional) Allow rebase with merge commit. Defaults to false.'
            settings.allow_squash: '- (Optional) Allow squash merge. Defaults to false'
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
        importStatements: []
    azuredevops_branch_policy_min_reviewers:
        subCategory: ""
        description: Manages a minimum reviewer branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_min_reviewers
        title: azuredevops_branch_policy_min_reviewers
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "allow_completion_with_rejects_or_waits": false,
                      "last_pusher_cannot_approve": true,
                      "on_last_iteration_require_vote": false,
                      "on_push_reset_approved_votes": true,
                      "reviewer_count": 7,
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": null,
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ],
                      "submitter_can_vote": false
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.allow_completion_with_rejects_or_waits: (Optional) Allow completion even if some reviewers vote to wait or reject. Defaults to false.
            settings.last_pusher_cannot_approve: (Optional) Prohibit the most recent pusher from approving their own changes. Defaults to false.
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.on_last_iteration_require_vote: (Optional) On last iteration require vote. Defaults to false.
            settings.on_push_reset_all_votes: (Optional) When new changes are pushed reset all code reviewer votes. Defaults to false.
            settings.on_push_reset_approved_votes: (Optional) When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to false.
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.reviewer_count: '- (Required) The number of reviewers needed to approve.'
            settings.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.submitter_can_vote: '- (Optional) Allow requesters to approve their own changes. Defaults to false.'
        importStatements: []
    azuredevops_branch_policy_status_check:
        subCategory: ""
        description: Manages status check branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_status_check
        title: azuredevops_branch_policy_status_check
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "applicability": "conditional",
                      "author_id": "${azuredevops_user_entitlement.example.id}",
                      "display_name": "PreCheck",
                      "invalidate_on_update": true,
                      "name": "Release",
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.author_id: azuredevops_user_entitlement.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "features": {
                        "artifacts": "disabled",
                        "testplans": "disabled"
                      },
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "account_license_type": "basic",
                      "principal_name": "mail@email.com"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.applicability: |-
                - (Optional) Policy applicability. If policy applicability is default, apply unless "Not Applicable"
                status is posted to the pull request. If policy applicability is conditional, policy is applied only after a status
                is posted to the pull request.
            settings.author_id: '- (Optional) The authorized user can post the status.'
            settings.display_name: '- (Optional) The display name.'
            settings.filename_patterns: '- (Optional) If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.'
            settings.genre: '- (Optional) The genre of the status to check (see Microsoft Documentation)'
            settings.invalidate_on_update: '- (Optional) Reset status whenever there are new changes.'
            settings.name: '- (Required) The status name to check.'
            settings.scope: |-
                (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined
                at least once.
        importStatements: []
    azuredevops_branch_policy_work_item_linking:
        subCategory: ""
        description: Require associations between branches and a work item within Azure DevOps.
        name: azuredevops_branch_policy_work_item_linking
        title: azuredevops_branch_policy_work_item_linking
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repositroy",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) Configuration for the policy. This block must be defined exactly once.'
            settings.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings.scope: (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
        importStatements: []
    azuredevops_build_definition:
        subCategory: ""
        description: Manages a Build Definition within Azure DevOps organization.
        name: azuredevops_build_definition
        title: azuredevops_build_definition
        examples:
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "${azuredevops_git_repository.example.default_branch}",
                      "repo_id": "${azuredevops_git_repository.example.id}",
                      "repo_type": "TfsGit",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ],
                  "schedules": [
                    {
                      "branch_filter": [
                        {
                          "exclude": [
                            "test",
                            "regression"
                          ],
                          "include": [
                            "master"
                          ]
                        }
                      ],
                      "days_to_build": [
                        "Wed",
                        "Sun"
                      ],
                      "schedule_only_with_changes": true,
                      "start_hours": 10,
                      "start_minutes": 59,
                      "time_zone": "(UTC) Coordinated Universal Time"
                    }
                  ],
                  "variable": [
                    {
                      "name": "PipelineVariable",
                      "value": "Go Microsoft!"
                    },
                    {
                      "is_secret": true,
                      "name": "PipelineSecret",
                      "secret_value": "ZGV2cw"
                    }
                  ],
                  "variable_groups": [
                    "${azuredevops_variable_group.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.branch_name: azuredevops_git_repository.example.default_branch
                repository.repo_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Managed by Terraform",
                      "name": "Example Pipeline Variables",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "FOO",
                          "value": "BAR"
                        }
                      ]
                    }
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "master",
                      "github_enterprise_url": "https://github.company.com",
                      "repo_id": "\u003cGitHub Org\u003e/\u003cRepo Name\u003e",
                      "repo_type": "GitHubEnterprise",
                      "service_connection_id": "${azuredevops_serviceendpoint_github_enterprise.example.id}",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ],
                  "schedules": [
                    {
                      "branch_filter": [
                        {
                          "exclude": [
                            "test",
                            "regression"
                          ],
                          "include": [
                            "main"
                          ]
                        }
                      ],
                      "days_to_build": [
                        "Wed",
                        "Sun"
                      ],
                      "schedule_only_with_changes": true,
                      "start_hours": 10,
                      "start_minutes": 59,
                      "time_zone": "(UTC) Coordinated Universal Time"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.service_connection_id: azuredevops_serviceendpoint_github_enterprise.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_github_enterprise.example: |-
                    {
                      "auth_personal": [
                        {
                          "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      ],
                      "description": "Managed by Terraform",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "Example GitHub Enterprise",
                      "url": "https://github.contoso.com"
                    }
        argumentDocs:
            agent_pool_name: '- (Optional) The agent pool that should execute the build. Defaults to Azure Pipelines.'
            ci_trigger: '- (Optional) Continuous Integration trigger.'
            ci_trigger.batch: '- (Optional) If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to true.'
            ci_trigger.branch_filter: '- (Optional) The branches to include and exclude from the trigger.'
            ci_trigger.max_concurrent_builds_per_branch: '- (Optional) The number of max builds per branch. Defaults to 1.'
            ci_trigger.override: '- (Optional) Override the azure-pipeline file and use a this configuration for all builds.'
            ci_trigger.path_filter: '- (Optional) Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.'
            ci_trigger.polling_interval: '- (Optional) How often the external repository is polled. Defaults to 0.'
            ci_trigger.polling_job_id: '- (Computed) This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.'
            ci_trigger.use_yaml: '- (Optional) Use the azure-pipeline file for the build configuration. Defaults to false.'
            id: '- The ID of the build definition'
            name: '- (Optional) The name of the build definition.'
            path: '- (Optional) The folder path of the build definition.'
            project_id: '- (Required) The project ID or project name.'
            pull_request_trigger: '- (Optional) Pull Request Integration Integration trigger.'
            pull_request_trigger.auto_cancel: '- (Optional) . Defaults to true.'
            pull_request_trigger.branch_filter: '- (Optional) The branches to include and exclude from the trigger.'
            pull_request_trigger.exclude: '- (Optional) List of branch patterns to exclude.'
            pull_request_trigger.forks: '- (Required) Set permissions for Forked repositories.'
            pull_request_trigger.forks.enabled: '- (Required) Build pull requests form forms of this repository.'
            pull_request_trigger.forks.share_secrets: '- (Required) Make secrets available to builds of forks.'
            pull_request_trigger.include: '- (Optional) List of branch patterns to include.'
            pull_request_trigger.initial_branch: '- (Optional) When use_yaml is true set this to the name of the branch that the azure-pipelines.yml exists on. Defaults to Managed by Terraform.'
            pull_request_trigger.override: '- (Optional) Override the azure-pipeline file and use this configuration for all builds.'
            pull_request_trigger.path_filter: '- (Optional) Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.'
            pull_request_trigger.use_yaml: '- (Optional) Use the azure-pipeline file for the build configuration. Defaults to false.'
            repository: '- (Required) A repository block as documented below.'
            repository.branch_name: '- (Optional) The branch name for which builds are triggered. Defaults to master.'
            repository.github_enterprise_url: '- (Optional) The Github Enterprise URL. Used if repo_type is GithubEnterprise.'
            repository.repo_id: '- (Required) The id of the repository. For TfsGit repos, this is simply the ID of the repository. For Github repos, this will take the form of <GitHub Org>/<Repo Name>. For Bitbucket repos, this will take the form of <Workspace ID>/<Repo Name>.'
            repository.repo_type: '- (Optional) The repository type. Valid values: GitHub or TfsGit or Bitbucket or GitHub Enterprise. Defaults to GitHub. If repo_type is GitHubEnterprise, must use existing project and GitHub Enterprise service connection.'
            repository.report_build_status: '- (Optional) Report build status. Default is true.'
            repository.service_connection_id: '- (Optional) The service connection ID. Used if the repo_type is GitHub or GitHubEnterprise.'
            repository.yml_path: '- (Required) The path of the Yaml file describing the build definition.'
            revision: '- The revision of the build definition'
            schedules.branch_filter: 'block supports the following:'
            schedules.days_to_build: ': (Required) When to build. Valid values: Mon, Tue, Wed, Thu, Fri, Sat, Sun.'
            schedules.exclude: '- (Optional) List of branch patterns to exclude.'
            schedules.include: '- (Optional) List of branch patterns to include.'
            schedules.schedule_job_id: '- The ID of the schedule job'
            schedules.schedule_only_with_changes: ': (Optional) Schedule builds if the source or pipeline has changed. Defaults to true.'
            schedules.start_hours: ': (Optional) Build start hour. Defaults to 0. Valid values: 0 ~ 23.'
            schedules.start_minutes: ': (Optional) Build start minute. Defaults to 0. Valid values: 0 ~ 59.'
            schedules.time_zone: |-
                : (Optional) Build time zone. Defaults to (UTC) Coordinated Universal Time. Valid values:
                (UTC-12:00) International Date Line West,
                (UTC-11:00) Coordinated Universal Time-11,
                (UTC-10:00) Aleutian Islands,
                (UTC-10:00) Hawaii,
                (UTC-09:30) Marquesas Islands,
                (UTC-09:00) Alaska,
                (UTC-09:00) Coordinated Universal Time-09,
                (UTC-08:00) Baja California,
                (UTC-08:00) Coordinated Universal Time-08,
                (UTC-08:00) Pacific Time (US &Canada),
                (UTC-07:00) Arizona,
                (UTC-07:00) Chihuahua, La Paz, Mazatlan,
                (UTC-07:00) Mountain Time (US &Canada),
                (UTC-07:00) Yukon,
                (UTC-06:00) Central America,
                (UTC-06:00) Central Time (US &Canada),
                (UTC-06:00) Easter Island,
                (UTC-06:00) Guadalajara, Mexico City, Monterrey,
                (UTC-06:00) Saskatchewan,
                (UTC-05:00) Bogota, Lima, Quito, Rio Branco,
                (UTC-05:00) Chetumal,
                (UTC-05:00) Eastern Time (US &Canada),
                (UTC-05:00) Haiti,
                (UTC-05:00) Havana,
                (UTC-05:00) Indiana (East),
                (UTC-05:00) Turks and Caicos,
                (UTC-04:00) Asuncion,
                (UTC-04:00) Atlantic Time (Canada),
                (UTC-04:00) Caracas,
                (UTC-04:00) Cuiaba,
                (UTC-04:00) Georgetown, La Paz, Manaus, San Juan,
                (UTC-04:00) Santiago,
                (UTC-03:30) Newfoundland,
                (UTC-03:00) Araguaina,
                (UTC-03:00) Brasilia,
                (UTC-03:00) Cayenne, Fortaleza,
                (UTC-03:00) City of Buenos Aires,
                (UTC-03:00) Greenland,
                (UTC-03:00) Montevideo,
                (UTC-03:00) Punta Arenas,
                (UTC-03:00) Saint Pierre and Miquelon,
                (UTC-03:00) Salvador,
                (UTC-02:00) Coordinated Universal Time-02,
                (UTC-02:00) Mid-Atlantic - Old,
                (UTC-01:00) Azores,
                (UTC-01:00) Cabo Verde Is.,
                (UTC) Coordinated Universal Time,
                (UTC+00:00) Dublin, Edinburgh, Lisbon, London,
                (UTC+00:00) Monrovia, Reykjavik,
                (UTC+00:00) Sao Tome,
                (UTC+01:00) Casablanca,
                (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna,
                (UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague,
                (UTC+01:00) Brussels, Copenhagen, Madrid, Paris,
                (UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb,
                (UTC+01:00) West Central Africa,
                (UTC+02:00) Amman,
                (UTC+02:00) Athens, Bucharest,
                (UTC+02:00) Beirut,
                (UTC+02:00) Cairo,
                (UTC+02:00) Chisinau,
                (UTC+02:00) Damascus,
                (UTC+02:00) Gaza, Hebron,
                (UTC+02:00) Harare, Pretoria,
                (UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius,
                (UTC+02:00) Jerusalem,
                (UTC+02:00) Juba,
                (UTC+02:00) Kaliningrad,
                (UTC+02:00) Khartoum,
                (UTC+02:00) Tripoli,
                (UTC+02:00) Windhoek,
                (UTC+03:00) Baghdad,
                (UTC+03:00) Istanbul,
                (UTC+03:00) Kuwait, Riyadh,
                (UTC+03:00) Minsk,
                (UTC+03:00) Moscow, St. Petersburg,
                (UTC+03:00) Nairobi,
                (UTC+03:00) Volgograd,
                (UTC+03:30) Tehran,
                (UTC+04:00) Abu Dhabi, Muscat,
                (UTC+04:00) Astrakhan, Ulyanovsk,
                (UTC+04:00) Baku,
                (UTC+04:00) Izhevsk, Samara,
                (UTC+04:00) Port Louis,
                (UTC+04:00) Saratov,
                (UTC+04:00) Tbilisi,
                (UTC+04:00) Yerevan,
                (UTC+04:30) Kabul,
                (UTC+05:00) Ashgabat, Tashkent,
                (UTC+05:00) Ekaterinburg,
                (UTC+05:00) Islamabad, Karachi,
                (UTC+05:00) Qyzylorda,
                (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi,
                (UTC+05:30) Sri Jayawardenepura,
                (UTC+05:45) Kathmandu,
                (UTC+06:00) Astana,
                (UTC+06:00) Dhaka,
                (UTC+06:00) Omsk,
                (UTC+06:30) Yangon (Rangoon),
                (UTC+07:00) Bangkok, Hanoi, Jakarta,
                (UTC+07:00) Barnaul, Gorno-Altaysk,
                (UTC+07:00) Hovd,
                (UTC+07:00) Krasnoyarsk,
                (UTC+07:00) Novosibirsk,
                (UTC+07:00) Tomsk,
                (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi,
                (UTC+08:00) Irkutsk,
                (UTC+08:00) Kuala Lumpur, Singapore,
                (UTC+08:00) Perth,
                (UTC+08:00) Taipei,
                (UTC+08:00) Ulaanbaatar,
                (UTC+08:45) Eucla,
                (UTC+09:00) Chita,
                (UTC+09:00) Osaka, Sapporo, Tokyo,
                (UTC+09:00) Pyongyang,
                (UTC+09:00) Seoul,
                (UTC+09:00) Yakutsk,
                (UTC+09:30) Adelaide,
                (UTC+09:30) Darwin,
                (UTC+10:00) Brisbane,
                (UTC+10:00) Canberra, Melbourne, Sydney,
                (UTC+10:00) Guam, Port Moresby,
                (UTC+10:00) Hobart,
                (UTC+10:00) Vladivostok,
                (UTC+10:30) Lord Howe Island,
                (UTC+11:00) Bougainville Island,
                (UTC+11:00) Chokurdakh,
                (UTC+11:00) Magadan,
                (UTC+11:00) Norfolk Island,
                (UTC+11:00) Sakhalin,
                (UTC+11:00) Solomon Is., New Caledonia,
                (UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky,
                (UTC+12:00) Auckland, Wellington,
                (UTC+12:00) Coordinated Universal Time+12,
                (UTC+12:00) Fiji,
                (UTC+12:00) Petropavlovsk-Kamchatsky - Old,
                (UTC+12:45) Chatham Islands,
                (UTC+13:00) Coordinated Universal Time+13,
                (UTC+13:00) Nuku'alofa,
                (UTC+13:00) Samoa,
                (UTC+14:00) Kiritimati Island.
            variable: '- (Optional) A list of variable blocks, as documented below.'
            variable.allow_override: '- (Optional) True if the variable can be overridden. Defaults to true.'
            variable.is_secret: '- (Optional) True if the variable is a secret. Defaults to false.'
            variable.name: '- (Required) The name of the variable.'
            variable.secret_value: '- (Optional) The secret value of the variable. Used when is_secret set to true.'
            variable.value: '- (Optional) The value of the variable.'
            variable_groups: '- (Optional) A list of variable group IDs (integers) to link to the build definition.'
        importStatements: []
    azuredevops_build_definition_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Build Definition
        name: azuredevops_build_definition_permissions
        title: azuredevops_build_definition_permissions
        examples:
            - name: example
              manifest: |-
                {
                  "build_definition_id": "${azuredevops_build_definition.example.id}",
                  "permissions": {
                    "DeleteBuilds": "Deny",
                    "EditBuildQuality": "Deny",
                    "StopBuilds": "Allow",
                    "ViewBuilds": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                build_definition_id: azuredevops_build_definition.example.id
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_build_definition.example: |-
                    {
                      "ci_trigger": [
                        {
                          "use_yaml": true
                        }
                      ],
                      "name": "Example Build Definition",
                      "path": "\\ExampleFolder",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository": [
                        {
                          "branch_name": "${azuredevops_git_repository.example.default_branch}",
                          "repo_id": "${azuredevops_git_repository.example.id}",
                          "repo_type": "TfsGit",
                          "yml_path": "azure-pipelines.yml"
                        }
                      ]
                    }
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            build_definition_id: '- (Required) The id of the build definition to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
        importStatements: []
    azuredevops_build_folder:
        subCategory: ""
        description: Manages a Build Folder.
        name: azuredevops_build_folder
        title: azuredevops_build_folder
        examples:
            - name: example
              manifest: |-
                {
                  "description": "ExampleFolder description",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) Folder Description.'
            path: '- (Required) The folder path.'
            project_id: '- (Required) The ID of the project in which the folder will be created.'
        importStatements:
            - terraform import azuredevops_build_folder.example "Example Project/\\ExampleFolder"
            - terraform import azuredevops_build_folder.example 00000000-0000-0000-0000-000000000000/\\ExampleFolder
    azuredevops_build_folder_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Build Folder
        name: azuredevops_build_folder_permissions
        title: azuredevops_build_folder_permissions
        examples:
            - name: example
              manifest: |-
                {
                  "path": "\\ExampleFolder",
                  "permissions": {
                    "AdministerBuildPermissions": "NotSet",
                    "DeleteBuildDefinition": "Deny",
                    "DeleteBuilds": "Deny",
                    "DestroyBuilds": "Deny",
                    "EditBuildDefinition": "Deny",
                    "EditBuildQuality": "Allow",
                    "ManageBuildQualities": "Deny",
                    "ManageBuildQueue": "Deny",
                    "QueueBuilds": "Allow",
                    "RetainIndefinitely": "Allow",
                    "StopBuilds": "Allow",
                    "UpdateBuildInformation": "Deny",
                    "ViewBuildDefinition": "Allow",
                    "ViewBuilds": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_build_folder.example: |-
                    {
                      "description": "ExampleFolder description",
                      "path": "\\ExampleFolder",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Required) The folder path to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
        importStatements: []
    azuredevops_check_branch_control:
        subCategory: ""
        description: Manages a branch control check.
        name: azuredevops_check_branch_control
        title: azuredevops_check_branch_control
        examples:
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_agent_queue.example.id}",
                  "target_resource_type": "queue"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "name": "example-pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}",
                  "target_resource_type": "repository"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_variable_group.example.id}",
                  "target_resource_type": "variablegroup"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Example Variable Group Description",
                      "name": "Example Variable Group",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "key1",
                          "value": "val1"
                        },
                        {
                          "is_secret": true,
                          "name": "key2",
                          "secret_value": "val2"
                        }
                      ]
                    }
        argumentDocs:
            allowed_branches: '- (Optional) The branches allowed to use the resource. Specify a comma separated list of allowed branches in refs/heads/branch_name format. To allow deployments from all branches, specify * . refs/heads/features/* , refs/heads/releases/* restricts deployments to all branches under features/ or releases/ . Defaults to *.'
            display_name: '- (Required) The name of the branch control check displayed in the web UI.'
            id: '- The ID of the check.'
            ignore_unknown_protection_status: '- (Optional) Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is true. Defaults to false.'
            project_id: '- (Required) The project ID.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup.'
            verify_branch_protection: '- (Optional) Validate the branches being deployed are protected. Defaults to false.'
        importStatements: []
    azuredevops_check_business_hours:
        subCategory: ""
        description: Manages a branch control check.
        name: azuredevops_check_business_hours
        title: azuredevops_check_business_hours
        examples:
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_agent_queue.example.id}",
                  "target_resource_type": "queue",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "name": "example-pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}",
                  "target_resource_type": "repository",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_variable_group.example.id}",
                  "target_resource_type": "variablegroup",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Example Variable Group Description",
                      "name": "Example Variable Group",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "key1",
                          "value": "val1"
                        },
                        {
                          "is_secret": true,
                          "name": "key2",
                          "secret_value": "val2"
                        }
                      ]
                    }
        argumentDocs:
            display_name: '- (Required) The name of the business hours check displayed in the web UI.'
            end_time: '- (Required) The end of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.'
            friday: '- (Optional) This check will pass on Fridays. Defaults to false.'
            id: '- The ID of the check.'
            monday: '- (Optional) This check will pass on Mondays. Defaults to false.'
            project_id: '- (Required) The project ID.'
            saturday: '- (Optional) This check will pass on Saturdays. Defaults to false.'
            start_time: '- (Required) The beginning of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.'
            sunday: '- (Optional) This check will pass on Sundays. Defaults to false.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup.'
            thursday: '- (Optional) This check will pass on Thursdays. Defaults to false.'
            time_zone: '- (Required) The time zone this check will be evaluated in. See below for supported values.'
            tuesday: '- (Optional) This check will pass on Tuesday. Defaults to false.'
            wednesday: '- (Optional) This check will pass on Wednesdays. Defaults to false.'
        importStatements: []
    azuredevops_environment:
        subCategory: ""
        description: Manages an Environment.
        name: azuredevops_environment
        title: azuredevops_environment
        examples:
            - name: example
              manifest: |-
                {
                  "name": "Example Environment",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) A description for the Environment.'
            id: '- The ID of the Environment.'
            name: '- (Required) The name which should be used for this Environment.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Environment to be created.'
        importStatements: []
    azuredevops_git_permissions:
        subCategory: ""
        description: Manages permissions for Git repositories
        name: azuredevops_git_permissions
        title: azuredevops_git_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateBranch": "NotSet",
                    "CreateTag": "Deny",
                    "ManagePermissions": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-group.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-group.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "branch_name": "refs/heads/master",
                  "permissions": {
                    "ForcePush": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-group.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-group.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-project-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-repo-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateBranch": "NotSet",
                    "CreateTag": "Deny",
                    "ManagePermissions": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-administrators.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-administrators.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-branch-permissions
              manifest: |-
                {
                  "branch_name": "master",
                  "permissions": {
                    "ForcePush": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-contributors.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-contributors.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            branch_name: '- (Optional) The name of the branch to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The follwing permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            repository_id: '- (Optional) The ID of the GIT repository to assign the permissions'
        importStatements: []
    azuredevops_git_repository:
        subCategory: ""
        description: Manages a git repository within Azure DevOps organization.
        name: azuredevops_git_repository
        title: azuredevops_git_repository
        examples:
            - name: example
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Empty Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${initialization}"
                      ]
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-fork
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Fork Repository",
                  "parent_repository_id": "${azuredevops_git_repository.example.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                parent_repository_id: azuredevops_git_repository.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-import
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Import",
                      "source_type": "Git",
                      "source_url": "https://github.com/microsoft/terraform-provider-azuredevops.git"
                    }
                  ],
                  "name": "Example Import Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_generic_git.example-serviceendpoint: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "\u003cpassword\u003e/\u003cPAT\u003e",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_url": "https://dev.azure.com/org/project/_git/repository",
                      "service_endpoint_name": "Example Generic Git",
                      "username": "username"
                    }
            - name: example-import
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Import",
                      "service_connection_id": "${azuredevops_serviceendpoint_generic_git.example-serviceendpoint.id}",
                      "source_type": "Git",
                      "source_url": "https://dev.azure.com/example-org/private-repository.git"
                    }
                  ],
                  "name": "Example Import Existing Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                initialization.service_connection_id: azuredevops_serviceendpoint_generic_git.example-serviceendpoint.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_generic_git.example-serviceendpoint: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "\u003cpassword\u003e/\u003cPAT\u003e",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_url": "https://dev.azure.com/org/project/_git/repository",
                      "service_endpoint_name": "Example Generic Git",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${initialization}"
                      ]
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            default_branch: '- The ref of the default branch. Will be used as the branch name for initialized repositories.'
            id: '- The ID of the Git repository.'
            initialization: '- (Required) An initialization block as documented below.'
            initialization.init_type: '- (Required) The type of repository to create. Valid values: Uninitialized, Clean or Import.'
            initialization.service_connection_id: (Optional) The id of service connection used to authenticate to a private repository for import initialization.
            initialization.source_type: '- (Optional) Type of the source repository. Used if the init_type is Import. Valid values: Git.'
            initialization.source_url: '- (Optional) The URL of the source repository. Used if the init_type is Import.'
            is_fork: '- True if the repository was created as a fork.'
            name: '- (Required) The name of the git repository.'
            parent_repository_id: '- (Optional) The ID of a Git project from which a fork is to be created.'
            project_id: '- (Required) The project ID or project name.'
            remote_url: '- Git HTTPS URL of the repository'
            size: '- Size in bytes.'
            ssh_url: '- Git SSH URL of the repository.'
            url: '- REST API URL of the repository.'
            web_url: '- Web link to the repository.'
        importStatements: []
    azuredevops_git_repository_branch:
        subCategory: ""
        description: Manages a Git Repository Branch.
        name: azuredevops_git_repository_branch
        title: azuredevops_git_repository_branch
        examples:
            - name: example
              manifest: |-
                {
                  "name": "example-branch-name",
                  "ref_branch": "${azuredevops_git_repository.example.default_branch}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                ref_branch: azuredevops_git_repository.example.default_branch
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example_from_commit_id
              manifest: |-
                {
                  "name": "example-from-commit-id",
                  "ref_commit_id": "${azuredevops_git_repository_branch.example.last_commit_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                ref_commit_id: azuredevops_git_repository_branch.example.last_commit_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            id: '- The ID of the Git Repository Branch, in the format <repository_id>:<name>.'
            last_commit_id: '- The commit object ID of last commit on the branch.'
            name: '- (Required) The name of the branch in short format not prefixed with refs/heads/.'
            ref_branch: '- (Optional) The reference to the source branch to create the branch from, in <name> or refs/heads/<name> format. Conflict with ref_tag, ref_commit_id.'
            ref_commit_id: '- (Optional) The commit object ID to create the branch from. Conflict with ref_branch, ref_tag.'
            ref_tag: '- (Optional) The reference to the tag to create the branch from, in <name> or refs/tags/<name> format. Conflict with ref_branch, ref_commit_id.'
            repository_id: '- (Required) The ID of the repository the branch is created against.'
        importStatements: []
    azuredevops_git_repository_file:
        subCategory: ""
        description: Manage files within an Azure DevOps Git repository.
        name: azuredevops_git_repository_file
        title: azuredevops_git_repository_file
        examples:
            - name: example
              manifest: |-
                {
                  "branch": "refs/heads/master",
                  "commit_message": "First commit",
                  "content": "**/*.tfstate",
                  "file": ".gitignore",
                  "overwrite_on_create": false,
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            branch: |-
                - (Optional) Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it
                does not already exist.
            commit_message: '- (Optional) Commit message when adding or updating the managed file.'
            content: '- (Required) The file content.'
            file: '- (Required) The path of the file to manage.'
            overwrite_on_create: '- (Optional) Enable overwriting existing files (defaults to false).'
            repository_id: '- (Required) The ID of the Git repository.'
        importStatements: []
    azuredevops_group:
        subCategory: ""
        description: Manages a group within Azure DevOps organization.
        name: azuredevops_group
        title: azuredevops_group
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Example description",
                  "display_name": "Example group",
                  "members": [
                    "${data.azuredevops_group.example-readers.descriptor}",
                    "${data.azuredevops_group.example-contributors.descriptor}"
                  ],
                  "scope": "${azuredevops_project.example.id}"
                }
              references:
                scope: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            azuredevops_group: resource via the members block and by using the azuredevops_group_membership resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.
            description: '- (Optional) The Description of the Project.'
            descriptor: '- The identity (subject) descriptor of the Group.'
            display_name: '- (Optional) The name of a new Azure DevOps group that is not backed by an external provider. The origin_id and mail arguments cannot be used simultaneously with display_name.'
            domain: '- This represents the name of the container of origin for a graph member.'
            id: '- The ID of the Group.'
            mail: '- (Optional) The mail address as a reference to an existing group from an external AD or AAD backed provider. The scope, origin_id and display_name arguments cannot be used simultaneously with mail.'
            members: '- (Optional)'
            origin: '- The type of source provider for the origin identifier (ex:AD, AAD, MSA)'
            origin_id: '- (Optional) The OriginID as a reference to a group from an external AD or AAD backed provider. The scope, mail and display_name arguments cannot be used simultaneously with origin_id.'
            principal_name: '- This is the PrincipalName of this graph member from the source provider.'
            scope: '- (Optional) The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x'
            subject_kind: '- This field identifies the type of the graph subject (ex: Group, Scope, User).'
            url: '- This url is the full route to the source resource of this graph subject.'
        importStatements: []
    azuredevops_group_membership:
        subCategory: ""
        description: Manages group membership within Azure DevOps organization.
        name: azuredevops_group_membership
        title: azuredevops_group_membership
        examples:
            - name: example
              manifest: |-
                {
                  "group": "${data.azuredevops_group.example.descriptor}",
                  "members": [
                    "${azuredevops_user_entitlement.example.descriptor}"
                  ]
                }
              references:
                group: data.azuredevops_group.example.descriptor
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "principal_name": "foo@contoso.com"
                    }
        argumentDocs:
            azuredevops_group_membership resource: via the members block and by using the azuredevops_group resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.
            group: '- (Required) The descriptor of the group being managed.'
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            members: '- (Required) A list of user or group descriptors that will become members of the group.'
            mode: '- (Optional) The mode how the resource manages group members.'
            mode == add: ': the resource will ensure that all specified members will be part of the referenced group'
            mode == overwrite: ': the resource will replace all existing members with the members specified within the members block'
        importStatements: []
    azuredevops_iteration_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Iteration (Sprint)
        name: azuredevops_iteration_permissions
        title: azuredevops_iteration_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "CREATE_CHILDREN": "Deny",
                    "DELETE": "Deny",
                    "GENERIC_READ": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-iteration-permissions
              manifest: |-
                {
                  "path": "Iteration 1",
                  "permissions": {
                    "CREATE_CHILDREN": "Allow",
                    "DELETE": "Allow",
                    "GENERIC_READ": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) The name of the branch to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
        importStatements: []
    azuredevops_project:
        subCategory: ""
        description: Manages a project within Azure DevOps organization.
        name: azuredevops_project
        title: azuredevops_project
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "features": {
                    "artifacts": "disabled",
                    "testplans": "disabled"
                  },
                  "name": "Example Project",
                  "version_control": "Git",
                  "visibility": "private",
                  "work_item_template": "Agile"
                }
        argumentDocs:
            description: '- (Optional) The Description of the Project.'
            features: |-
                - (Optional) Defines the status (enabled, disabled) of the project features.
                Valid features are boards, repositories, pipelines, testplans, artifacts
            id: '- The Project ID of the Project.'
            name: '- (Required) The Project Name.'
            process_template_id: '- The Process Template ID used by the Project.'
            version_control: '- (Optional) Specifies the version control system. Valid values: Git or Tfvc. Defaults to Git.'
            visibility: '- (Optional) Specifies the visibility of the Project. Valid values: private or public. Defaults to private.'
            work_item_template: '- (Optional) Specifies the work item template. Valid values: Agile, Basic, CMMI, Scrum or a custom, pre-existing one. Defaults to Agile. An empty string will use the parent organization default.'
        importStatements: []
    azuredevops_project_features:
        subCategory: ""
        description: Manages features for Azure DevOps projects.
        name: azuredevops_project_features
        title: azuredevops_project_features
        examples:
            - name: example-features
              manifest: |-
                {
                  "features": {
                    "artifacts": "enabled",
                    "testplans": "disabled"
                  },
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            features: |-
                - (Required) Defines the status (enabled, disabled) of the project features.
                Valid features boards, repositories, pipelines, testplans, artifacts
            projectd_id: '- (Required) The id of the project for which the project features will be managed.'
        importStatements: []
    azuredevops_project_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps project
        name: azuredevops_project_permissions
        title: azuredevops_project_permissions
        examples:
            - name: example-permission
              manifest: |-
                {
                  "permissions": {
                    "DELETE": "Deny",
                    "DELETE_TEST_RESULTS": "Deny",
                    "EDIT_BUILD_STATUS": "NotSet",
                    "WORK_ITEM_MOVE": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
        importStatements: []
    azuredevops_project_pipeline_settings:
        subCategory: ""
        description: Manages Pipeline Settings for Azure DevOps projects.
        name: azuredevops_project_pipeline_settings
        title: azuredevops_project_pipeline_settings
        examples:
            - name: example
              manifest: |-
                {
                  "enforce_job_scope": true,
                  "enforce_referenced_repo_scoped_token": false,
                  "enforce_settable_var": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "publish_pipeline_metadata": false,
                  "status_badges_are_private": true
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            enforce_job_scope: '- (Optional) Limit job authorization scope to current project for non-release pipelines.'
            enforce_referenced_repo_scoped_token: '- (Optional) Protect access to repositories in YAML pipelines.'
            enforce_settable_var: '- (Optional) Limit variables that can be set at queue time.'
            id: '- The ID of the project.'
            project_id: '- (Required) The id of the project for which the project pipeline settings will be managed.'
            publish_pipeline_metadata: '- (Optional) Publish metadata from pipelines.'
            status_badges_are_private: '- (Optional) Disable anonymous access to badges.'
        importStatements: []
    azuredevops_repository_policy_author_email_pattern:
        subCategory: ""
        description: Manages author email pattern repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_author_email_pattern
        title: azuredevops_repository_policy_author_email_pattern
        examples:
            - name: example
              manifest: |-
                {
                  "author_email_patterns": [
                    "user1@test.com",
                    "user2@test.com"
                  ],
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "author_email_patterns": [
                    "user1@test.com",
                    "user2@test.com"
                  ],
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            author_email_patterns: |-
                - (Required) Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards.
                Email patterns prefixed with "!" are excluded. Order is important.
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of repository policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_case_enforcement:
        subCategory: ""
        description: Manages a case enforcement repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_case_enforcement
        title: azuredevops_repository_policy_case_enforcement
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "enforce_consistent_case": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "enforce_consistent_case": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            enforce_consistent_case: '- (Required) Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_check_credentials:
        subCategory: ""
        description: Manage a credentials check repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_check_credentials
        title: azuredevops_repository_policy_check_credentials
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_file_path_pattern:
        subCategory: ""
        description: Manages a file path pattern repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_file_path_pattern
        title: azuredevops_repository_policy_file_path_pattern
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "filepath_patterns": [
                    "*.go",
                    "/home/test/*.ts"
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: examplep
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "filepath_patterns": [
                    "*.go",
                    "/home/test/*.ts"
                  ],
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            filepath_patterns: '- (Required) Block pushes from introducing file paths that match the following patterns. Exact paths begin with "/". You can specify exact paths and wildcards. You can also specify multiple paths using ";" as a separator. Paths prefixed with "!" are excluded. Order is important.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_max_file_size:
        subCategory: ""
        description: Manages a max file size repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_max_file_size
        title: azuredevops_repository_policy_max_file_size
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_file_size": 1,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_file_size": 1,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            max_file_size: '- (Required) Block pushes that contain new or updated files larger than this limit. Available values is: 1, 2, 5, 10, 100, 200 (MB).'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_max_path_length:
        subCategory: ""
        description: Manages a max path length repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_max_path_length
        title: azuredevops_repository_policy_max_path_length
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_path_length": 500,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Sample Repo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_path_length": 1000,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            max_path_length: '- (Required) Block pushes that introduce paths that exceed the specified length.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_repository_policy_reserved_names:
        subCategory: ""
        description: Manage a reserved names repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_reserved_names
        title: azuredevops_repository_policy_reserved_names
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
        importStatements: []
    azuredevops_resource_authorization:
        subCategory: ""
        description: Manages authorization of resources within Azure DevOps organization.
        name: azuredevops_resource_authorization
        title: azuredevops_resource_authorization
        examples:
            - name: example
              manifest: |-
                {
                  "authorized": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_id": "${azuredevops_serviceendpoint_bitbucket.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
                resource_id: azuredevops_serviceendpoint_bitbucket.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_bitbucket.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "example-bitbucket",
                      "username": "username"
                    }
        argumentDocs:
            authorized: '- (Required) Set to true to allow public access in the project. Type: boolean.'
            definition_id: '- (Optional) The ID of the build definition to authorize. Type: string.'
            project_id: '- (Required) The project ID or project name. Type: string.'
            resource_id: '- (Required) The ID of the resource to authorize. Type: string.'
            type: '- (Optional) The type of the resource to authorize. Type: string. Valid values: endpoint, queue, variablegroup. Default value: endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_argocd:
        subCategory: ""
        description: Manages a ArgoCD server endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_argocd
        title: azuredevops_serviceendpoint_argocd
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example ArgoCD",
                  "url": "https://argocd.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example ArgoCD",
                  "url": "https://argocd.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block for the ArgoCD as documented below.'
            authentication_basic.password: '- ArgoCD Password.'
            authentication_basic.username: '- ArgoCD Username.'
            authentication_token: '- (Optional) An authentication_token block for the ArgoCD as documented below.'
            authentication_token.token: '- Authentication Token generated through ArgoCD.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the ArgoCD server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_artifactory:
        subCategory: ""
        description: Manages an Artifactory server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_artifactory
        title: azuredevops_serviceendpoint_artifactory
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: ""
            authentication_token: or authentication_basic (one is required)
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            password: '- Artifactory Password.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            token: '- Authentication Token generated through Artifactory.'
            url: '- (Required) URL of the Artifactory server to connect with.'
            username: '- Artifactory Username.'
        importStatements: []
    azuredevops_serviceendpoint_aws:
        subCategory: ""
        description: Manages a AWS service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_aws
        title: azuredevops_serviceendpoint_aws
        examples:
            - name: example
              manifest: |-
                {
                  "access_key_id": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by AzureDevOps",
                  "project_id": "${azuredevops_project.example.id}",
                  "secret_access_key": "accesskey",
                  "service_endpoint_name": "Example AWS"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            access_key_id: '- (Required) The AWS access key ID for signing programmatic requests.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            external_id: '- (Optional) A unique identifier that is used by third parties when assuming roles in their customers'' accounts, aka cross-account role access.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            role_session_name: '- (Optional) Optional identifier for the assumed role session.'
            role_to_assume: '- (Optional) The Amazon Resource Name (ARN) of the role to assume.'
            secret_access_key: '- (Required) The AWS secret access key for signing programmatic requests.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            session_token: '- (Optional) The AWS session token for signing programmatic requests.'
        importStatements: []
    azuredevops_serviceendpoint_azurecr:
        subCategory: ""
        description: Manages a Azure Container Registry service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azurecr
        title: azuredevops_serviceendpoint_azurecr
        examples:
            - name: example
              manifest: |-
                {
                  "azurecr_name": "ExampleAcr",
                  "azurecr_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_name": "subscription name",
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_group": "example-rg",
                  "service_endpoint_name": "Example AzureCR"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            azurecr_name: '- (Required) The Azure container registry name.'
            azurecr_spn_tenantid: '- (Required) The tenant id of the service principal.'
            azurecr_subscription_id: '- (Required) The subscription id of the Azure targets.'
            azurecr_subscription_name: '- (Required) The subscription name of the Azure targets.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            resource_group: '- (Required) The resource group to which the container registry belongs.'
            service_endpoint_name: '- (Required) The name you will use to refer to this service connection in task inputs.'
            service_principal_id: '- The service principal ID.'
        importStatements: []
    azuredevops_serviceendpoint_azuredevops:
        subCategory: ""
        description: Manages a Azure DevOps service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azuredevops
        title: azuredevops_serviceendpoint_azuredevops
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "org_url": "https://dev.azure.com/testorganization",
                  "personal_access_token": "0000000000000000000000000000000000000000000000000000",
                  "project_id": "${azuredevops_project.example.id}",
                  "release_api_url": "https://vsrm.dev.azure.com/testorganization",
                  "service_endpoint_name": "Example Azure DevOps"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            org_url: '- (Required) The organization URL.'
            personal_access_token: '- (Required) The Azure DevOps personal access token.'
            project_id: '- (Required) The ID of the project.'
            release_api_url: '- (Required) The URL of the release API.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
        importStatements: []
    azuredevops_serviceendpoint_azurerm:
        subCategory: ""
        description: Manages a AzureRM service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azurerm
        title: azuredevops_serviceendpoint_azurerm
        examples:
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "credentials": [
                    {
                      "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                      "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_management_group_id": "managementGroup",
                  "azurerm_management_group_name": "managementGroup",
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "credentials": [
                    {
                      "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                      "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            azurerm_management_group_id: '- (Optional) The Management group ID of the Azure targets.'
            azurerm_management_group_name: '- (Optional) The Management group Name of the targets.'
            azurerm_spn_tenantid: '- (Required) The Tenant ID if the service principal.'
            azurerm_subscription_id: '- (Optional) The Subscription ID of the Azure targets.'
            azurerm_subscription_name: '- (Optional) The Subscription Name of the targets.'
            credentials: '- (Optional) A credentials block.'
            credentials.serviceprincipalid: '- (Required) The service principal application Id'
            credentials.serviceprincipalkey: '- (Required) The service principal secret.'
            description: '- (Optional) Service connection description.'
            environment: '- (Optional) The Cloud Environment to use. Defaults to AzureCloud. Possible values are AzureCloud, AzureChinaCloud. Changing this forces a new resource to be created.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            resource_group: '- (Optional) The resource group used for scope of automatic service endpoint.'
            service_endpoint_name: '- (Required) The Service Endpoint Name.'
        importStatements: []
    azuredevops_serviceendpoint_bitbucket:
        subCategory: ""
        description: Manages a Bitbucket service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_bitbucket
        title: azuredevops_serviceendpoint_bitbucket
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Bitbucket",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) Bitbucket account password.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            username: '- (Required) Bitbucket account username.'
        importStatements: []
    azuredevops_serviceendpoint_dockerregistry:
        subCategory: ""
        description: Manages a Docker Registry service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_dockerregistry
        title: azuredevops_serviceendpoint_dockerregistry
        examples:
            - name: example
              manifest: |-
                {
                  "docker_email": "email@example.com",
                  "docker_password": "12345",
                  "docker_username": "example",
                  "project_id": "${azuredevops_project.example.id}",
                  "registry_type": "DockerHub",
                  "service_endpoint_name": "Example Docker Hub"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-other
              manifest: |-
                {
                  "docker_password": "12345",
                  "docker_registry": "https://sample.azurecr.io/v1",
                  "docker_username": "sample",
                  "project_id": "${azuredevops_project.example.id}",
                  "registry_type": "Others",
                  "service_endpoint_name": "Example Docker Registry"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            docker_email: '- (Optional) The email for Docker account user.'
            docker_password: '- (Optional) The password for the account user identified above.'
            docker_registry: '- (Optional) The URL of the Docker registry. (Default: "https://index.docker.io/v1/")'
            docker_username: '- (Optional) The identifier of the Docker account user.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            registry_type: '- (Optional) Can be "DockerHub" or "Others" (Default "DockerHub")'
            service_endpoint_name: '- (Required) The name you will use to refer to this service connection in task inputs.'
        importStatements: []
    azuredevops_serviceendpoint_externaltfs:
        subCategory: ""
        description: Manages an Azure Repos/Team Foundation Server service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_externaltfs
        title: azuredevops_serviceendpoint_externaltfs
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example External TFS Name",
                  "url": "https://dev.azure.com/myorganization"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_personal: '- (Required) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for Azure DevOps Organization.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) Azure DevOps Organization or TFS Project Collection Url.'
        importStatements: []
    azuredevops_serviceendpoint_generic:
        subCategory: ""
        description: Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external server using basic authentication via a username and password.
        name: azuredevops_serviceendpoint_generic
        title: azuredevops_serviceendpoint_generic
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://some-server.example.com",
                  "service_endpoint_name": "Example Generic",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) The password or token key used to authenticate to the server url using basic authentication.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The URL of the server associated with the service endpoint.'
            service_endpoint_name: '- (Required) The service endpoint name.'
            username: '- (Optional) The username used to authenticate to the server url using basic authentication.'
        importStatements: []
    azuredevops_serviceendpoint_generic_git:
        subCategory: ""
        description: Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external git service using basic authentication via a username and password.
        name: azuredevops_serviceendpoint_generic_git
        title: azuredevops_serviceendpoint_generic_git
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_url": "https://dev.azure.com/org/project/_git/repository",
                  "service_endpoint_name": "Example Generic Git",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            enable_pipelines_access: '- (Optional) A value indicating whether or not to attempt accessing this git server from Azure Pipelines.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) The PAT or password used to authenticate to the git repository.'
            project_id: '- (Required) The ID of the project.'
            repository_url: '- (Required) The URL of the repository associated with the service endpoint.'
            service_endpoint_name: '- (Required) The name of the service endpoint.'
            username: '- (Optional) The username used to authenticate to the git repository.'
        importStatements: []
    azuredevops_serviceendpoint_github:
        subCategory: ""
        description: Manages a GitHub service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_github
        title: azuredevops_serviceendpoint_github
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Personal Access Token"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "auth_oauth": [
                    {
                      "oauth_configuration_id": "00000000-0000-0000-0000-000000000000"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Apps: Azure Pipelines"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_oauth: '- (Optional) An auth_oauth block as documented below. Allows connecting using an Oauth token.'
            auth_oauth.oauth_configuration_id: '- (Required) NOTE: GitHub OAuth flow can not be performed via terraform. You must create this on Azure DevOps and then import it. The OAuth Configuration ID.'
            auth_personal: '- (Optional) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for GitHub.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
        importStatements: []
    azuredevops_serviceendpoint_github_enterprise:
        subCategory: ""
        description: Manages a GitHub-Enterprise-Server service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_github_enterprise
        title: azuredevops_serviceendpoint_github_enterprise
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Enterprise",
                  "url": "https://github.contoso.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_personal: '- (Optional) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for GitHub.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) GitHub Enterprise Server Url.'
        importStatements: []
    azuredevops_serviceendpoint_incomingwebhook:
        subCategory: ""
        description: Manages a Service Connection Incoming WebHook.
        name: azuredevops_serviceendpoint_incomingwebhook
        title: azuredevops_serviceendpoint_incomingwebhook
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "http_header": "X-Hub-Signature",
                  "project_id": "${azuredevops_project.example.id}",
                  "secret": "secret",
                  "service_endpoint_name": "Example IncomingWebhook",
                  "webhook_name": "example_webhook"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            http_header: '- (Optional) Http header name on which checksum will be sent.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Service Connection Incoming WebHook to be created.'
            secret: '- (Optional) Secret for the WebHook. WebHook service will use this secret to calculate the payload checksum.'
            service_endpoint_name: '- (Required) The name of the service endpoint. Changing this forces a new Service Connection Incoming WebHook to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Service Connection Incoming WebHook.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Service Connection Incoming WebHook.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Service Connection Incoming WebHook.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Service Connection Incoming WebHook.'
            webhook_name: '- (Required) The name of the WebHook.'
        importStatements:
            - terraform import azuredevops_serviceendpoint_incomingwebhook.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
    azuredevops_serviceendpoint_jfrog_artifactory_v2:
        subCategory: ""
        description: Manages a JFrog Artifactory V2 server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_artifactory_v2
        title: azuredevops_serviceendpoint_jfrog_artifactory_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Artifactory V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Artifactory V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) A authentication_basic block as documented below.'
            authentication_basic.password: '- Artifactory Password.'
            authentication_basic.username: '- Artifactory Username.'
            authentication_token: '- (Optional) A authentication_token block as documented below.'
            authentication_token.token: '- Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_distribution_v2:
        subCategory: ""
        description: Manages a JFrog Distribution V2 server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_distribution_v2
        title: azuredevops_serviceendpoint_jfrog_distribution_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Distribution V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Distribution V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) A authentication_basic block as documented below.'
            authentication_basic.password: '- Artifactory Password.'
            authentication_basic.username: '- Artifactory Username.'
            authentication_token: '- (Optional) A authentication_token block as documented below.'
            authentication_token.token: '- Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_platform_v2:
        subCategory: ""
        description: Manages a JFrog Platform V2 server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_platform_v2
        title: azuredevops_serviceendpoint_jfrog_platform_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) A authentication_basic block as documented below.'
            authentication_basic.password: '- Artifactory Password.'
            authentication_basic.username: '- Artifactory Username.'
            authentication_token: '- (Optional) A authentication_token block as documented below.'
            authentication_token.token: '- Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_xray_v2:
        subCategory: ""
        description: Manages a JFrog XRay V2 server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_xray_v2
        title: azuredevops_serviceendpoint_jfrog_xray_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) A authentication_basic block as documented below.'
            authentication_basic.password: '- Artifactory Password.'
            authentication_basic.username: '- Artifactory Username.'
            authentication_token: '- (Optional) A authentication_token block as documented below.'
            authentication_token.token: '- Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_kubernetes:
        subCategory: ""
        description: Manages a Kubernetes service endpoint Azure DevOps organization.
        name: azuredevops_serviceendpoint_kubernetes
        title: azuredevops_serviceendpoint_kubernetes
        examples:
            - name: example-azure
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "AzureSubscription",
                  "azure_subscription": [
                    {
                      "cluster_name": "example-aks",
                      "namespace": "default",
                      "resourcegroup_id": "example-rg",
                      "subscription_id": "00000000-0000-0000-0000-000000000000",
                      "subscription_name": "Example",
                      "tenant_id": "00000000-0000-0000-0000-000000000000"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-kubeconfig
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "Kubeconfig",
                  "kubeconfig": [
                    {
                      "accept_untrusted_certs": true,
                      "cluster_context": "dev-frontend",
                      "kube_config": "                              apiVersion: v1\n                              clusters:\n                              - cluster:\n                                  certificate-authority: fake-ca-file\n                                  server: https://1.2.3.4\n                                name: development\n                              contexts:\n                              - context:\n                                  cluster: development\n                                  namespace: frontend\n                                  user: developer\n                                name: dev-frontend\n                              current-context: dev-frontend\n                              kind: Config\n                              preferences: {}\n                              users:\n                              - name: developer\n                                user:\n                                  client-certificate: fake-cert-file\n                                  client-key: fake-key-file\n"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-service-account
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "ServiceAccount",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_account": [
                    {
                      "ca_cert": "0000000000000000000000000000000",
                      "token": "000000000000000000000000"
                    }
                  ],
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            apiserver_url: '- (Required) The hostname (in form of URI) of the Kubernetes API.'
            authorization_type: '- (Required) The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.'
            azure_subscription: '- (Optional) A azure_subscription block defined blow.'
            azure_subscription.azure_environment: '- (Optional) Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.'
            azure_subscription.cluster_admin: '- (Optional) Set this option to allow use cluster admin credentials.'
            azure_subscription.cluster_name: '- (Required) The name of the Kubernetes cluster.'
            azure_subscription.namespace: '- (Optional) The Kubernetes namespace. Default value is "default".'
            azure_subscription.resourcegroup_id: '- (Required) The resource group name, to which the Kubernetes cluster is deployed.'
            azure_subscription.subscription_id: '- (Required) The id of the Azure subscription.'
            azure_subscription.subscription_name: '- (Required) The name of the Azure subscription.'
            azure_subscription.tenant_id: '- (Required) The id of the tenant used by the subscription.'
            id: '- The ID of the service endpoint.'
            kubeconfig: '- (Optional) A kubeconfig block defined blow.'
            kubeconfig.accept_untrusted_certs: '- (Optional) Set this option to allow clients to accept a self-signed certificate.'
            kubeconfig.cluster_context: '- (Optional) Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.'
            kubeconfig.kube_config: '- (Required) The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.'
            project_id: '- (Required) The ID of the project.'
            service_account: '- (Optional)  A service_account block defined blow.'
            service_account.ca_cert: '- (Required) The certificate from a Kubernetes secret object.'
            service_account.token: '- (Required) The token from a Kubernetes secret object.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
        importStatements: []
    azuredevops_serviceendpoint_npm:
        subCategory: ""
        description: Manages a npm server endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_npm
        title: azuredevops_serviceendpoint_npm
        examples:
            - name: example
              manifest: |-
                {
                  "access_token": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example npm",
                  "url": "https://registry.npmjs.org"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            access_token: '- (Required) The access token for npm registry.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) URL of the npm registry to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_octopusdeploy:
        subCategory: ""
        description: Manages an Octopus Deploy service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_octopusdeploy
        title: azuredevops_serviceendpoint_octopusdeploy
        examples:
            - name: example
              manifest: |-
                {
                  "api_key": "000000000000000000000000000000000000",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Octopus Deploy",
                  "url": "https://octopus.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_key: '- (Required) API key to connect to Octopus Deploy.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            ignore_ssl_error: '- (Optional) Whether to ignore SSL errors when connecting to the Octopus server from the agent. Default to false.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            url: '- (Required) Octopus Server url.'
        importStatements: []
    azuredevops_serviceendpoint_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Service Endpoint
        name: azuredevops_serviceendpoint_permissions
        title: azuredevops_serviceendpoint_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "allow",
                    "Create": "allow",
                    "Use": "allow",
                    "ViewAuthorization": "allow",
                    "ViewEndpoint": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_dockerregistry.example: |-
                    {
                      "docker_email": "email@example.com",
                      "docker_password": "password",
                      "docker_username": "username",
                      "project_id": "${azuredevops_project.example.id}",
                      "registry_type": "DockerHub",
                      "service_endpoint_name": "Example Docker Hub"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "deny",
                    "Create": "deny",
                    "Use": "allow",
                    "ViewAuthorization": "allow",
                    "ViewEndpoint": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}",
                  "serviceendpoint_id": "${azuredevops_serviceendpoint_dockerregistry.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
                serviceendpoint_id: azuredevops_serviceendpoint_dockerregistry.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_dockerregistry.example: |-
                    {
                      "docker_email": "email@example.com",
                      "docker_password": "password",
                      "docker_username": "username",
                      "project_id": "${azuredevops_project.example.id}",
                      "registry_type": "DockerHub",
                      "service_endpoint_name": "Example Docker Hub"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            serviceendpoint_id: '- (Optional) The id of the service endpoint to assign the permissions.'
        importStatements: []
    azuredevops_serviceendpoint_runpipeline:
        subCategory: ""
        description: Manages a Azure DevOps plugin RunPipeline.
        name: azuredevops_serviceendpoint_runpipeline
        title: azuredevops_serviceendpoint_runpipeline
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "organization_name": "Organization Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Pipeline Runner"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_personal: '- (Required) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for Azure DevOps Pipeline. It also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            organization_name: '- (Required) The organization name used for Organization Url and Release API Url fields.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
        importStatements: []
    azuredevops_serviceendpoint_servicefabric:
        subCategory: ""
        description: Manages a Service Fabric service endpoint Azure DevOps organization.
        name: azuredevops_serviceendpoint_servicefabric
        title: azuredevops_serviceendpoint_servicefabric
        examples:
            - name: example
              manifest: |-
                {
                  "certificate": [
                    {
                      "client_certificate": "${filebase64(\"certificate.pfx\")}",
                      "client_certificate_password": "password",
                      "server_certificate_lookup": "Thumbprint",
                      "server_certificate_thumbprint": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Service Fabric"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: test
              manifest: |-
                {
                  "azure_active_directory": [
                    {
                      "password": "password",
                      "server_certificate_lookup": "Thumbprint",
                      "server_certificate_thumbprint": "0000000000000000000000000000000000000000",
                      "username": "username"
                    }
                  ],
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.project.id}",
                  "service_endpoint_name": "Sample Service Fabric"
                }
              references:
                project_id: azuredevops_project.project.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "name": "Sample Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: test
              manifest: |-
                {
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "none": [
                    {
                      "cluster_spn": "HTTP/www.contoso.com",
                      "unsecured": false
                    }
                  ],
                  "project_id": "${azuredevops_project.project.id}",
                  "service_endpoint_name": "Sample Service Fabric"
                }
              references:
                project_id: azuredevops_project.project.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "name": "Sample Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            certificate: or azure_active_directory or none blocks
            client_certificate: '- (Required) Base64 encoding of the cluster''s client certificate file.'
            client_certificate_password: '- (Optional) Password for the certificate.'
            cluster_endpoint: '- (Required) Client connection endpoint for the cluster. Prefix the value with ''tcp://'';. This value overrides the publish profile.'
            cluster_spn: '- (Optional) Fully qualified domain SPN for gMSA account. This is applicable only if unsecured option is disabled.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) - Password for the Azure Active Directory account.'
            project_id: '- (Required) The ID of the project.'
            server_certificate_common_name: '- (Optional) The common name(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma ('','')'
            server_certificate_lookup: '- (Required) Verification mode for the cluster. Possible values include Thumbprint or CommonName.'
            server_certificate_thumbprint: '- (Optional) The thumbprint(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma ('','')'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            unsecured: '- (Optional) Skip using windows security for authentication.'
            username: '- (Required) - Specify an Azure Active Directory account.'
        importStatements: []
    azuredevops_serviceendpoint_sonarcloud:
        subCategory: ""
        description: Manages the SonarCloud service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_sonarcloud
        title: azuredevops_serviceendpoint_sonarcloud
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SonarCloud",
                  "token": "0000000000000000000000000000000000000000"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            token: '- (Required) Authentication Token generated through SonarCloud (go to My Account > Security > Generate Tokens).'
        importStatements: []
    azuredevops_serviceendpoint_sonarqube:
        subCategory: ""
        description: Manages a SonarQube server endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_sonarqube
        title: azuredevops_serviceendpoint_sonarqube
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SonarQube",
                  "token": "0000000000000000000000000000000000000000",
                  "url": "https://sonarqube.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            token: '- (Required) Authentication Token generated through SonarQube (go to My Account > Security > Generate Tokens).'
            url: '- (Required) URL of the SonarQube server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_ssh:
        subCategory: ""
        description: Manages a SSH service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_ssh
        title: azuredevops_serviceendpoint_ssh
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "host": "1.2.3.4",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SSH",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            host: '- (Required) The Host name or IP address of the remote machine.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) Password for connecting to the endpoint.'
            port: '- (Optional) Port number on the remote machine to use for connecting. Defaults to 22.'
            private_key: '- (Optional) Private Key for connecting to the endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            username: '- (Required) Username for connecting to the endpoint.'
        importStatements: []
    azuredevops_servicehook_permissions:
        subCategory: ""
        description: Manages permissions for AzureDevOps service hooks
        name: azuredevops_servicehook_permissions
        title: azuredevops_servicehook_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "DeleteSubscriptions": "allow",
                    "EditSubscriptions": "allow",
                    "PublishEvents": "allow",
                    "ViewSubscriptions": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (optional) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
        importStatements: []
    azuredevops_tagging_permissions:
        subCategory: ""
        description: Manages permissions for AzureDevOps Tagging
        name: azuredevops_tagging_permissions
        title: azuredevops_tagging_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "Create": "allow",
                    "Delete": "allow",
                    "Enumerate": "allow",
                    "Update": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group or user principal to assign the permissions.'
            project_id: '- (Optional) The ID of the project to assign the permissions. If omitted, organization wide permissions for tagging are managed.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
        importStatements: []
    azuredevops_team:
        subCategory: ""
        description: Manages a team within a project in a Azure DevOps organization.
        name: azuredevops_team
        title: azuredevops_team
        examples:
            - name: example
              manifest: |-
                {
                  "administrators": [
                    "${data.azuredevops_group.example-project-contributors.descriptor}"
                  ],
                  "members": [
                    "${data.azuredevops_group.example-project-readers.descriptor}"
                  ],
                  "name": "Example Team",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            administrators: '- (Optional) List of subject descriptors to define administrators of the team.'
            azuredevops_team: |-
                resource via the administrators block and by using the
                azuredevops_team_administrators resource. However it's not possible to use
                both methods to manage team administrators, since there'll be conflicts.
            description: '- (Optional) The description of the Team.'
            descriptor: '- The descriptor of the Team.'
            id: '- The ID of the Team.'
            members: '- (Optional) List of subject descriptors to define members of the team.'
            name: '- (Required) The name of the Team.'
            project_id: '- (Required) The Project ID.'
        importStatements: []
    azuredevops_team_administrators:
        subCategory: ""
        description: Manages administrators of a team within a project in a Azure DevOps organization.
        name: azuredevops_team_administrators
        title: azuredevops_team_administrators
        examples:
            - name: example-team-administrators
              manifest: |-
                {
                  "administrators": [
                    "${data.azuredevops_group.example-project-contributors.descriptor}"
                  ],
                  "mode": "overwrite",
                  "project_id": "${azuredevops_team.example.project_id}",
                  "team_id": "${azuredevops_team.example.id}"
                }
              references:
                project_id: azuredevops_team.example.project_id
                team_id: azuredevops_team.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_team.example: |-
                    {
                      "name": "${azuredevops_project.example.name} Team 2",
                      "project_id": "${azuredevops_project.example.id}"
                    }
        argumentDocs:
            administrators: '- (Required) List of subject descriptors to define adminitrators of the team.'
            azuredevops_team: |-
                resource via the administrators block and by using the
                azuredevops_team_administrators resource. However it's not possible to use
                both methods to manage team administrators, since there'll be conflicts.
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            mode: '- (Optional) The mode how the resource manages team administrators.'
            mode == add: ': the resource will ensure that all specified administrators will be part of the referenced team'
            mode == overwrite: ': the resource will replace all existing administrators with the administrators specified within the administrators block'
            project_id: '- (Required) The Project ID.'
            team_id: '- (Required) The ID of the Team.'
        importStatements: []
    azuredevops_team_members:
        subCategory: ""
        description: Manages members of a team within a project in a Azure DevOps organization.
        name: azuredevops_team_members
        title: azuredevops_team_members
        examples:
            - name: example-team-members
              manifest: |-
                {
                  "members": [
                    "${data.azuredevops_group.example-project-readers.descriptor}"
                  ],
                  "mode": "overwrite",
                  "project_id": "${azuredevops_team.example.project_id}",
                  "team_id": "${azuredevops_team.example.id}"
                }
              references:
                project_id: azuredevops_team.example.project_id
                team_id: azuredevops_team.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_team.example: |-
                    {
                      "name": "${azuredevops_project.example.name} Team 2",
                      "project_id": "${azuredevops_project.example.id}"
                    }
        argumentDocs:
            azuredevops_team: |-
                resource via the members block and by using the
                azuredevops_team_members resource. However it's not possible to use
                both methods to manage team members, since there'll be conflicts.
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            members: '- (Required) List of subject descriptors to define members of the team.'
            mode: '- (Optional) The mode how the resource manages team members.'
            mode == add: ': the resource will ensure that all specified members will be part of the referenced team'
            mode == overwrite: ': the resource will replace all existing members with the members specified within the members block'
            project_id: '- (Required) The Project ID.'
            team_id: '- (Required) The ID of the Team.'
        importStatements: []
    azuredevops_user_entitlement:
        subCategory: ""
        description: Manages a user entitlement within Azure DevOps organization.
        name: azuredevops_user_entitlement
        title: azuredevops_user_entitlement
        examples:
            - name: example
              manifest: |-
                {
                  "principal_name": "foo@contoso.com"
                }
        argumentDocs:
            account_license_type: '- (Optional) Type of Account License. Valid values: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.'
            descriptor: '- The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.'
            id: '- The id of the entitlement.'
            licensing_source: '- (Optional) The source of the licensing (e.g. Account. MSDN etc.) Valid values: account (Default), auto, msdn, none, profile, trial'
            origin: '- (Optional) The type of source provider for the origin identifier.'
            origin_id: '- (Optional) The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.'
            principal_name: '- (Optional) The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.'
        importStatements: []
    azuredevops_variable_group:
        subCategory: ""
        description: Manages variable groups within Azure DevOps project.
        name: azuredevops_variable_group
        title: azuredevops_variable_group
        examples:
            - name: example
              manifest: |-
                {
                  "allow_access": true,
                  "description": "Example Variable Group Description",
                  "name": "Example Variable Group",
                  "project_id": "${azuredevops_project.example.id}",
                  "variable": [
                    {
                      "name": "key1",
                      "value": "val1"
                    },
                    {
                      "is_secret": true,
                      "name": "key2",
                      "secret_value": "val2"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "allow_access": true,
                  "description": "Example Variable Group Description",
                  "key_vault": [
                    {
                      "name": "example-kv",
                      "service_endpoint_id": "${azuredevops_serviceendpoint_azurerm.example.id}"
                    }
                  ],
                  "name": "Example Variable Group",
                  "project_id": "${azuredevops_project.example.id}",
                  "variable": [
                    {
                      "name": "key1"
                    },
                    {
                      "name": "key2"
                    }
                  ]
                }
              references:
                key_vault.service_endpoint_id: azuredevops_serviceendpoint_azurerm.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_azurerm.example: |-
                    {
                      "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_name": "Example Subscription Name",
                      "credentials": [
                        {
                          "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                          "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      ],
                      "description": "Managed by Terraform",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "Example AzureRM"
                    }
        argumentDocs:
            allow_access: '- (Required) Boolean that indicate if this variable group is shared by all pipelines of this project.'
            description: '- (Optional) The description of the Variable Group.'
            id: '- The ID of the Variable Group returned after creation in Azure DevOps.'
            key_vault: -(Optional) A list of key_vault blocks as documented below.
            key_vault.name: '- The name of the Azure key vault to link secrets from as variables.'
            key_vault.search_depth: '- Set the Azure Key Vault Secret search depth. Defaults to 20.'
            key_vault.service_endpoint_id: '- The id of the Azure subscription endpoint to access the key vault.'
            name: '- (Required) The name of the Variable Group.'
            project_id: '- (Required) The ID of the project.'
            variable: '- (Optional) One or more variable blocks as documented below.'
            variable.is_secret: '- (Optional) A boolean flag describing if the variable value is sensitive. Defaults to false.'
            variable.name: '- (Required) The key value used for the variable. Must be unique within the Variable Group.'
            variable.secret_value: '- (Optional) The secret value of the variable. If omitted, it will default to empty string. Used when is_secret set to true.'
            variable.value: '- (Optional) The value of the variable. If omitted, it will default to empty string.'
        importStatements: []
    azuredevops_workitem:
        subCategory: ""
        description: Manages a Work Item in Azure Devops.
        name: azuredevops_workitem
        title: azuredevops_workitem
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${data.azuredevops_project.example.id}",
                  "state": "Active",
                  "tags": [
                    "Tag"
                  ],
                  "title": "Example Work Item",
                  "type": "Issue"
                }
              references:
                project_id: data.azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "custom_fields": {
                    "example": "example"
                  },
                  "project_id": "${data.azuredevops_project.example.id}",
                  "state": "Active",
                  "tags": [
                    "Tag"
                  ],
                  "title": "Example Work Item",
                  "type": "Issue"
                }
              references:
                project_id: data.azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            custom_fields: '- (Optional) Specifies a list with Custom Fields for the Work Item.'
            id: '- The ID of the Work Item.'
            project_id: '- (Required) The ID of the Project.'
            state: '- (Optional) The state of the Work Item. The four main states that are defined for the User Story (Agile) are New, Active, Resolved, and Closed. See Workflow states for more details.'
            tags: '- (Optional) Specifies a list of Tags.'
            title: '- (Required) The Title of the Work Item.'
            type: '- (Required) The Type of the Work Item. The work item type varies depending on the process used when creating the project(Agile, Basic, Scrum, Scrum). See Work Item Types for more details.'
        importStatements: []
    azuredevops_workitemquery_permissions:
        subCategory: ""
        description: Manages permissions for Work Item Queries
        name: azuredevops_workitemquery_permissions
        title: azuredevops_workitemquery_permissions
        examples:
            - name: project-wiq-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "path": "/Team",
                  "permissions": {
                    "Contribute": "Allow",
                    "Delete": "Deny",
                    "Read": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-project-permissions
              manifest: |-
                {
                  "permissions": {
                    "Contribute": "Deny",
                    "Delete": "Deny",
                    "ManagePermissions": "Deny",
                    "Read": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-sharedqueries-permissions
              manifest: |-
                {
                  "path": "/",
                  "permissions": {
                    "Delete": "Deny",
                    "Read": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-contributors.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-contributors.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) Path to a query or folder beneath Shared Queries'
            permissions: '- (Required) the permissions to assign. The following permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
        importStatements: []
