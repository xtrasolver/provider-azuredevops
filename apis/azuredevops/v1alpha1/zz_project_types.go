/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectObservation struct {

	// The Description of the Project.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines the status (enabled, disabled) of the project features.
	// Valid features are boards, repositories, pipelines, testplans, artifacts
	Features map[string]*string `json:"features,omitempty" tf:"features,omitempty"`

	// The Project ID of the Project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Process Template ID used by the Project.
	ProcessTemplateID *string `json:"processTemplateId,omitempty" tf:"process_template_id,omitempty"`

	// Specifies the version control system. Valid values: Git or Tfvc. Defaults to Git.
	VersionControl *string `json:"versionControl,omitempty" tf:"version_control,omitempty"`

	// Specifies the visibility of the Project. Valid values: private or public. Defaults to private.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`

	// Specifies the work item template. Valid values: Agile, Basic, CMMI, Scrum or a custom, pre-existing one. Defaults to Agile. An empty string will use the parent organization default.
	WorkItemTemplate *string `json:"workItemTemplate,omitempty" tf:"work_item_template,omitempty"`
}

type ProjectParameters struct {

	// The Description of the Project.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines the status (enabled, disabled) of the project features.
	// Valid features are boards, repositories, pipelines, testplans, artifacts
	// +kubebuilder:validation:Optional
	Features map[string]*string `json:"features,omitempty" tf:"features,omitempty"`

	// Specifies the version control system. Valid values: Git or Tfvc. Defaults to Git.
	// +kubebuilder:validation:Optional
	VersionControl *string `json:"versionControl,omitempty" tf:"version_control,omitempty"`

	// Specifies the visibility of the Project. Valid values: private or public. Defaults to private.
	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`

	// Specifies the work item template. Valid values: Agile, Basic, CMMI, Scrum or a custom, pre-existing one. Defaults to Agile. An empty string will use the parent organization default.
	// +kubebuilder:validation:Optional
	WorkItemTemplate *string `json:"workItemTemplate,omitempty" tf:"work_item_template,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API. Manages a project within Azure DevOps organization.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSpec   `json:"spec"`
	Status            ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
