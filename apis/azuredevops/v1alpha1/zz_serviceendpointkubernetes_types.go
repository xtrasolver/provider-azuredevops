/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureSubscriptionObservation struct {

	// Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
	// type of azure cloud: AzureCloud
	AzureEnvironment *string `json:"azureEnvironment,omitempty" tf:"azure_environment,omitempty"`

	// Set this option to allow use cluster admin credentials.
	// Enable Cluster Admin
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin,omitempty"`

	// The name of the Kubernetes cluster.
	// name of aks-resource
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// The Kubernetes namespace. Default value is "default".
	// accessed namespace
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The resource group name, to which the Kubernetes cluster is deployed.
	// id of resourcegroup
	ResourcegroupID *string `json:"resourcegroupId,omitempty" tf:"resourcegroup_id,omitempty"`

	// The id of the Azure subscription.
	// id of azure subscription
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// The name of the Azure subscription.
	// name of azure subscription
	SubscriptionName *string `json:"subscriptionName,omitempty" tf:"subscription_name,omitempty"`

	// The id of the tenant used by the subscription.
	// id of aad-tenant
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureSubscriptionParameters struct {

	// Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
	// type of azure cloud: AzureCloud
	// +kubebuilder:validation:Optional
	AzureEnvironment *string `json:"azureEnvironment,omitempty" tf:"azure_environment,omitempty"`

	// Set this option to allow use cluster admin credentials.
	// Enable Cluster Admin
	// +kubebuilder:validation:Optional
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin,omitempty"`

	// The name of the Kubernetes cluster.
	// name of aks-resource
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// The Kubernetes namespace. Default value is "default".
	// accessed namespace
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The resource group name, to which the Kubernetes cluster is deployed.
	// id of resourcegroup
	// +kubebuilder:validation:Required
	ResourcegroupID *string `json:"resourcegroupId" tf:"resourcegroup_id,omitempty"`

	// The id of the Azure subscription.
	// id of azure subscription
	// +kubebuilder:validation:Required
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`

	// The name of the Azure subscription.
	// name of azure subscription
	// +kubebuilder:validation:Required
	SubscriptionName *string `json:"subscriptionName" tf:"subscription_name,omitempty"`

	// The id of the tenant used by the subscription.
	// id of aad-tenant
	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

type KubeconfigObservation struct {

	// Set this option to allow clients to accept a self-signed certificate.
	// Enable this if your authentication uses untrusted certificates
	AcceptUntrustedCerts *bool `json:"acceptUntrustedCerts,omitempty" tf:"accept_untrusted_certs,omitempty"`

	// Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
	// Context of your cluster
	ClusterContext *string `json:"clusterContext,omitempty" tf:"cluster_context,omitempty"`
}

type KubeconfigParameters struct {

	// Set this option to allow clients to accept a self-signed certificate.
	// Enable this if your authentication uses untrusted certificates
	// +kubebuilder:validation:Optional
	AcceptUntrustedCerts *bool `json:"acceptUntrustedCerts,omitempty" tf:"accept_untrusted_certs,omitempty"`

	// Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
	// Context of your cluster
	// +kubebuilder:validation:Optional
	ClusterContext *string `json:"clusterContext,omitempty" tf:"cluster_context,omitempty"`

	// The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
	// Content of the kubeconfig file. The configuration information in your kubeconfig file allows Kubernetes clients to talk to your Kubernetes API servers. This file is used by kubectl and all supported Kubernetes clients.
	// +kubebuilder:validation:Required
	KubeConfigSecretRef v1.SecretKeySelector `json:"kubeConfigSecretRef" tf:"-"`
}

type ServiceAccountObservation struct {
}

type ServiceAccountParameters struct {

	// The certificate from a Kubernetes secret object.
	// Secret cert
	// +kubebuilder:validation:Required
	CACertSecretRef v1.SecretKeySelector `json:"caCertSecretRef" tf:"-"`

	// The token from a Kubernetes secret object.
	// Secret token
	// +kubebuilder:validation:Required
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`
}

type ServiceEndpointKubernetesObservation struct {

	// The hostname (in form of URI) of the Kubernetes API.
	// URL to Kubernete's API-Server
	ApiserverURL *string `json:"apiserverUrl,omitempty" tf:"apiserver_url,omitempty"`

	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.
	// Type of credentials to use
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// A azure_subscription block defined blow.
	// 'AzureSubscription'-type of configuration
	AzureSubscription []AzureSubscriptionObservation `json:"azureSubscription,omitempty" tf:"azure_subscription,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A kubeconfig block defined blow.
	// 'Kubeconfig'-type of configuration
	Kubeconfig []KubeconfigObservation `json:"kubeconfig,omitempty" tf:"kubeconfig,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// A service_account block defined blow.
	// 'ServiceAccount'-type of configuration
	ServiceAccount []ServiceAccountParameters `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceEndpointKubernetesParameters struct {

	// The hostname (in form of URI) of the Kubernetes API.
	// URL to Kubernete's API-Server
	// +kubebuilder:validation:Optional
	ApiserverURL *string `json:"apiserverUrl,omitempty" tf:"apiserver_url,omitempty"`

	// +kubebuilder:validation:Optional
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.
	// Type of credentials to use
	// +kubebuilder:validation:Optional
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// A azure_subscription block defined blow.
	// 'AzureSubscription'-type of configuration
	// +kubebuilder:validation:Optional
	AzureSubscription []AzureSubscriptionParameters `json:"azureSubscription,omitempty" tf:"azure_subscription,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A kubeconfig block defined blow.
	// 'Kubeconfig'-type of configuration
	// +kubebuilder:validation:Optional
	Kubeconfig []KubeconfigParameters `json:"kubeconfig,omitempty" tf:"kubeconfig,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/xtrasolver/provider-azuredevops/apis/azuredevops/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in azuredevops to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in azuredevops to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// A service_account block defined blow.
	// 'ServiceAccount'-type of configuration
	// +kubebuilder:validation:Optional
	ServiceAccount []ServiceAccountParameters `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The Service Endpoint name.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

// ServiceEndpointKubernetesSpec defines the desired state of ServiceEndpointKubernetes
type ServiceEndpointKubernetesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceEndpointKubernetesParameters `json:"forProvider"`
}

// ServiceEndpointKubernetesStatus defines the observed state of ServiceEndpointKubernetes.
type ServiceEndpointKubernetesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceEndpointKubernetesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceEndpointKubernetes is the Schema for the ServiceEndpointKubernetess API. Manages a Kubernetes service endpoint Azure DevOps organization.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceEndpointKubernetes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.apiserverUrl)",message="apiserverUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.authorizationType)",message="authorizationType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceEndpointName)",message="serviceEndpointName is a required parameter"
	Spec   ServiceEndpointKubernetesSpec   `json:"spec"`
	Status ServiceEndpointKubernetesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceEndpointKubernetesList contains a list of ServiceEndpointKubernetess
type ServiceEndpointKubernetesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceEndpointKubernetes `json:"items"`
}

// Repository type metadata.
var (
	ServiceEndpointKubernetes_Kind             = "ServiceEndpointKubernetes"
	ServiceEndpointKubernetes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceEndpointKubernetes_Kind}.String()
	ServiceEndpointKubernetes_KindAPIVersion   = ServiceEndpointKubernetes_Kind + "." + CRDGroupVersion.String()
	ServiceEndpointKubernetes_GroupVersionKind = CRDGroupVersion.WithKind(ServiceEndpointKubernetes_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceEndpointKubernetes{}, &ServiceEndpointKubernetesList{})
}
